{"version":3,"file":"polygon-clipping.umd.min.js","sources":["../node_modules/splaytree/index.js","../src/flp.js","../src/vector.js","../src/clean-input.js","../src/sweep-event.js","../src/segment.js","../src/bbox.js","../src/geom-in.js","../src/geom-out.js","../src/sweep-line.js","../src/operation.js","../src/index.js"],"sourcesContent":["/* follows \"An implementation of top-down splaying\"\n * by D. Sleator <sleator@cs.cmu.edu> March 1992\n */\n\n/**\n * @typedef {*} Key\n */\n\n\n/**\n * @typedef {*} Value\n */\n\n\n/**\n * @typedef {function(node:Node):void} Visitor\n */\n\n\n/**\n * @typedef {function(a:Key, b:Key):number} Comparator\n */\n\n\n/**\n * @param {function(node:Node):string} NodePrinter\n */\n\n\n/**\n * @typedef {Object}  Node\n * @property {Key}    Key\n * @property {Value=} data\n * @property {Node}   left\n * @property {Node}   right\n */\n\nclass Node {\n\n  constructor (key, data) {\n    this.key    = key;\n    this.data   = data;\n    this.left   = null;\n    this.right  = null;\n  }\n}\n\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Simple top down splay, not requiring i to be in the tree t.\n * @param {Key} i\n * @param {Node?} t\n * @param {Comparator} comparator\n */\nfunction splay (i, t, comparator) {\n  if (t === null) return t;\n  let l, r, y;\n  const N = new Node();\n  l = r = N;\n\n  while (true) {\n    const cmp = comparator(i, t.key);\n    //if (i < t.key) {\n    if (cmp < 0) {\n      if (t.left === null) break;\n      //if (i < t.left.key) {\n      if (comparator(i, t.left.key) < 0) {\n        y = t.left;                           /* rotate right */\n        t.left = y.right;\n        y.right = t;\n        t = y;\n        if (t.left === null) break;\n      }\n      r.left = t;                               /* link right */\n      r = t;\n      t = t.left;\n    //} else if (i > t.key) {\n    } else if (cmp > 0) {\n      if (t.right === null) break;\n      //if (i > t.right.key) {\n      if (comparator(i, t.right.key) > 0) {\n        y = t.right;                          /* rotate left */\n        t.right = y.left;\n        y.left = t;\n        t = y;\n        if (t.right === null) break;\n      }\n      l.right = t;                              /* link left */\n      l = t;\n      t = t.right;\n    } else {\n      break;\n    }\n  }\n  /* assemble */\n  l.right = t.left;\n  r.left = t.right;\n  t.left = N.right;\n  t.right = N.left;\n  return t;\n}\n\n\n/**\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}      root\n */\nfunction insert (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  tree._size++;\n\n  if (t === null) {\n    node.left = node.right = null;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp < 0) {\n    node.left = t.left;\n    node.right = t;\n    t.left = null;\n  } else if (cmp >= 0) {\n    node.right = t.right;\n    node.left = t;\n    t.right = null;\n  }\n  return node;\n}\n\n\n/**\n * Insert i into the tree t, unless it's already there.\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}       root\n */\nfunction add (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  if (t === null) {\n    node.left = node.right = null;\n    tree._size++;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp === 0) return t;\n  else {\n    if (cmp < 0) {\n      node.left = t.left;\n      node.right = t;\n      t.left = null;\n    } else if (cmp > 0) {\n      node.right = t.right;\n      node.left = t;\n      t.right = null;\n    }\n    tree._size++;\n    return node;\n  }\n}\n\n\n/**\n * Deletes i from the tree if it's there\n * @param {Key}        i\n * @param {Tree}       tree\n * @param {Comparator} comparator\n * @param {Tree}       tree\n * @return {Node}      new root\n */\nfunction remove (i, t, comparator, tree) {\n  let x;\n  if (t === null) return null;\n  t = splay(i, t, comparator);\n  var cmp = comparator(i, t.key);\n  if (cmp === 0) {               /* found it */\n    if (t.left === null) {\n      x = t.right;\n    } else {\n      x = splay(i, t.left, comparator);\n      x.right = t.right;\n    }\n    tree._size--;\n    return x;\n  }\n  return t;                         /* It wasn't there */\n}\n\n\nfunction split (key, v, comparator) {\n  let left, right;\n  if (v === null) {\n    left = right = null;\n  } else {\n    v = splay(key, v, comparator);\n\n    const cmp = comparator(v.key, key);\n    if (cmp === 0) {\n      left  = v.left;\n      right = v.right;\n    } else if (cmp < 0) {\n      right   = v.right;\n      v.right = null;\n      left    = v;\n    } else {\n      left   = v.left;\n      v.left = null;\n      right  = v;\n    }\n  }\n  return { left, right };\n}\n\n\nfunction merge (left, right, comparator) {\n  if (right === null) return left;\n  if (left  === null) return right;\n\n  right = splay(left.key, right, comparator);\n  right.left = left;\n  return right;\n}\n\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Array<string>}               out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction printRow (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  printRow(root.left,  indent, false, out, printNode);\n    if (root.right) printRow(root.right, indent, true,  out, printNode);\n  }\n}\n\n\nexport default class Tree {\n\n  constructor (comparator = DEFAULT_COMPARE) {\n    this._comparator = comparator;\n    this._root = null;\n    this._size = 0;\n  }\n\n\n  /**\n   * Inserts a key, allows duplicates\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  insert (key, data) {\n    return this._root = insert(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Adds a key, if it is not present in the tree\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  add (key, data) {\n    return this._root = add(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  remove (key) {\n    this._root = remove(key, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    let node = this._root;\n    if (node) {\n      while (node.left) node = node.left;\n      this._root = splay(node.key,  this._root, this._comparator);\n      this._root = remove(node.key, this._root, this._comparator, this);\n      return { key: node.key, data: node.data };\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  findStatic (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return current;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  find (key) {\n    if (this._root) {\n      this._root = splay(key, this._root, this._comparator);\n      if (this._comparator(key, this._root.key) !== 0) return null;\n    }\n    return this._root;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Boolean}\n   */\n  contains (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return true;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return false;\n  }\n\n\n  /**\n   * @param  {Visitor} visitor\n   * @param  {*=}      ctx\n   * @return {SplayTree}\n   */\n  forEach (visitor, ctx) {\n    let current = this._root;\n    const Q = [];  /* Initialize stack s */\n    let done = false;\n\n    while (!done) {\n      if (current !==  null) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length !== 0) {\n          current = Q.pop();\n          visitor.call(ctx, current);\n\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range (low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns array of keys\n   * @return {Array<Key>}\n   */\n  keys () {\n    const keys = [];\n    this.forEach(({ key }) => keys.push(key));\n    return keys;\n  }\n\n\n  /**\n   * Returns array of all the data in the nodes\n   * @return {Array<Value>}\n   */\n  values () {\n    const values = [];\n    this.forEach(({ data }) => values.push(data));\n    return values;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  min() {\n    if (this._root) return this.minNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  max() {\n    if (this._root) return this.maxNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  minNode(t = this._root) {\n    if (t) while (t.left) t = t.left;\n    return t;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  maxNode(t = this._root) {\n    if (t) while (t.right) t = t.right;\n    return t;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    let current = this._root, done = false, i = 0;\n    const Q = [];\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = Q.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Node}   d\n   * @return {Node|null}\n   */\n  next (d) {\n    let root = this._root;\n    let successor = null;\n\n    if (d.right) {\n      successor = d.right;\n      while (successor.left) successor = successor.left;\n      return successor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) {\n        successor = root;\n        root = root.left;\n      } else root = root.right;\n    }\n\n    return successor;\n  }\n\n\n  /**\n   * @param  {Node} d\n   * @return {Node|null}\n   */\n  prev (d) {\n    let root = this._root;\n    let predecessor = null;\n\n    if (d.left !== null) {\n      predecessor = d.left;\n      while (predecessor.right) predecessor = predecessor.right;\n      return predecessor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) root = root.left;\n      else {\n        predecessor = root;\n        root = root.right;\n      }\n    }\n    return predecessor;\n  }\n\n\n  /**\n   * @return {SplayTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n\n  /**\n   * @return {NodeList}\n   */\n  toList() {\n    return toList(this._root);\n  }\n\n\n  /**\n   * Bulk-load items. Both array have to be same size\n   * @param  {Array<Key>}    keys\n   * @param  {Array<Value>}  [values]\n   * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n   *                                         tree's comparator. Sorting is done\n   *                                         in-place\n   * @return {AVLTree}\n   */\n  load (keys = [], values = [], presort = false) {\n    let size = keys.length;\n    const comparator = this._comparator;\n\n    // sort if needed\n    if (presort) sort(keys, values, 0, size - 1, comparator);\n\n    if (this._root === null) { // empty tree\n      this._root = loadRecursive(this._root, keys, values, 0, size);\n      this._size = size;\n    } else { // that re-builds the whole tree from two in-order traversals\n      const mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\n      size = this._size + size;\n      this._root = sortedListToBST({ head: mergedList }, 0, size);\n    }\n    return this;\n  }\n\n\n  /**\n   * @return {Boolean}\n   */\n  isEmpty() { return this._root === null; }\n\n  get size () { return this._size; }\n\n\n  /**\n   * @param  {NodePrinter=} printNode\n   * @return {String}\n   */\n  toString (printNode = (n) => n.key) {\n    const out = [];\n    printRow(this._root, '', true, (v) => out.push(v), printNode);\n    return out.join('');\n  }\n\n\n  update (key, newKey, newData) {\n    const comparator = this._comparator;\n    let { left, right } = split(key, this._root, comparator);\n    this._size--;\n    if (comparator(key, newKey) < 0) {\n      right = insert(newKey, newData, right, comparator, this);\n    } else {\n      left = insert(newKey, newData, left, comparator, this);\n    }\n    this._root = merge(left, right, comparator);\n  }\n\n\n  split(key) {\n    return split(key, this._root, this._comparator);\n  }\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction createList(keys, values) {\n  const head = { next: null };\n  let p = head;\n  for (let i = 0; i < keys.length; i++) {\n    p = p.next = { key: keys[i], data: values[i] };\n  }\n  p.next = null;\n  return head.next;\n}\n\n\nfunction toList (root) {\n  var current = root;\n  var Q = [], done = false;\n\n  const head = { next: null };\n  let p = head;\n\n  while (!done) {\n    if (current) {\n      Q.push(current);\n      current = current.left;\n    } else {\n      if (Q.length > 0) {\n        current = p = p.next = Q.pop();\n        current = current.right;\n      } else done = true;\n    }\n  }\n  p.next = null; // that'll work even if the tree was empty\n  return head.next;\n}\n\n\nfunction sortedListToBST(list, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const left = sortedListToBST(list, start, middle);\n\n    const root = list.head;\n    root.left = left;\n\n    list.head = list.head.next;\n\n    root.right = sortedListToBST(list, middle + 1, end);\n    return root;\n  }\n  return null;\n}\n\n\nfunction mergeLists (l1, l2, compare = (a, b) => a - b) {\n  const head = {}; // dummy\n  let p = head;\n\n  let p1 = l1;\n  let p2 = l2;\n\n  while (p1 !== null && p2 !== null) {\n    if (compare(p1.key, p2.key) < 0) {\n      p.next = p1;\n      p1 = p1.next;\n    } else {\n      p.next = p2;\n      p2 = p2.next;\n    }\n    p = p.next;\n  }\n\n  if (p1 !== null)      p.next = p1;\n  else if (p2 !== null) p.next = p2;\n\n  return head.next;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n","/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nlet epsilon = Number.EPSILON\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52)\n\nconst EPSILON_SQ = epsilon * epsilon\n\n/* FLP comparator */\nexport const cmp = (a, b) => {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0\n    }\n  }\n\n  // check if they're flp equal\n  if ((a - b) * (a - b) < EPSILON_SQ * a * b) {\n    return 0\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1\n}\n\n/* FLP point comparator, favors point encountered first by sweep line */\nexport const cmpPoints = (aPt, bPt) => {\n  if (aPt === bPt) return 0\n\n  // fist compare X, then compare Y\n  let a = aPt.x\n  let b = bPt.x\n\n  // inlined version of cmp() for performance boost\n  if (\n    a <= -epsilon ||\n    epsilon <= a ||\n    b <= -epsilon ||\n    epsilon <= b\n  ) {\n    const diff = a - b\n    if (diff * diff >= EPSILON_SQ * a * b) {\n      return a < b ? -1 : 1\n    }\n  }\n\n  a = aPt.y\n  b = bPt.y\n\n  // inlined version of cmp() for performance boost\n  if (\n    a <= -epsilon ||\n    epsilon <= a ||\n    b <= -epsilon ||\n    epsilon <= b\n  ) {\n    const diff = a - b\n    if (diff * diff >= EPSILON_SQ * a * b) {\n      return a < b ? -1 : 1\n    }\n  }\n\n  // they're the same\n  return 0\n}\n\n/* Greedy comparison. Two numbers are defined to touch\n * if their midpoint is indistinguishable from either. */\nexport const touch = (a, b) => {\n  const m = (a + b) / 2\n  return cmp(m, a) === 0 || cmp(m, b) === 0\n}\n\n/* Greedy comparison. Two points are defined to touch\n * if their midpoint is indistinguishable from either. */\nexport const touchPoints = (aPt, bPt) => {\n  const mPt = { x: (aPt.x + bPt.x) / 2, y: (aPt.y + bPt.y) / 2 }\n  return cmpPoints(mPt, aPt) === 0 || cmpPoints(mPt, bPt) === 0\n}\n","import { cmp } from './flp'\n\n/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a, b) => a.x * b.y - a.y * b.x\n\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a, b) => a.x * b.x + a.y * b.y\n\n/* Comparator for two vectors with same starting point */\nexport const compareVectorAngles = (basePt, endPt1, endPt2) => {\n  const v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y }\n  const v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y }\n  const kross = crossProduct(v1, v2)\n  return cmp(kross, 0)\n}\n\nexport const length = v => Math.sqrt(dotProduct(v, v))\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the closest point on an line (defined by a point and a vector)\n * to another point. */\nexport const closestPoint = (pt1, v1, pt2) => {\n  if (v1.x === 0) return { x: pt1.x, y: pt2.y } // vertical vector\n  if (v1.y === 0) return { x: pt2.x, y: pt1.y } // horizontal vector\n  const v2 = { x: pt2.x - pt1.x, y: pt2.y - pt1.y }\n  const dist = dotProduct(v1, v2) / dotProduct(v1, v1)\n  return { x: pt1.x + dist * v1.x, y: pt1.y + dist * v1.y }\n}\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt, v, y) => {\n  if (v.y === 0) return null\n  return { x: pt.x + v.x / v.y * ( y - pt.y ), y: y }\n}\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt, v, x) => {\n  if (v.x === 0) return null\n  return { x: x, y: pt.y + v.y / v.x * ( x - pt.x ) }\n}\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1, v1, pt2, v2) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x)\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x)\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y)\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y)\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2)\n  if (kross == 0) return null\n\n  const ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y }\n  const d1 = crossProduct(ve, v1) / kross\n  const d2 = crossProduct(ve, v2) / kross\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x + d2 * v1.x, x2 = pt2.x + d1 * v2.x\n  const y1 = pt1.y + d2 * v1.y, y2 = pt2.y + d1 * v2.y\n  const x = (x1 + x2) / 2\n  const y = (y1 + y2) / 2\n  return { x: x, y: y }\n}\n\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v) => {\n  return { x: -v.y, y: v.x }\n}\n","import { cmpPoints } from './flp'\nimport { compareVectorAngles } from './vector'\n\n/* Given input geometry as a standard array-of-arrays geojson-style\n * geometry, return one that uses objects as points, for better perf */\nexport const pointsAsObjects = geom => {\n  // we can handle well-formed multipolys and polys\n  const output = []\n  if (!Array.isArray(geom)) {\n    throw new Error('Input is not a Polygon or MultiPolygon')\n  }\n  for (let i = 0, iMax = geom.length; i < iMax; i++) {\n    if (!Array.isArray(geom[i]) || geom[i].length == 0) {\n      throw new Error('Input is not a Polygon or MultiPolygon')\n    }\n    output.push([])\n    for (let j = 0, jMax = geom[i].length; j < jMax; j++) {\n      if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {\n        throw new Error('Input is not a Polygon or MultiPolygon')\n      }\n      if (Array.isArray(geom[i][j][0])) { // multipolygon\n        output[i].push([])\n        for (let k = 0, kMax = geom[i][j].length; k < kMax; k++) {\n          if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {\n            throw new Error('Input is not a Polygon or MultiPolygon')\n          }\n          if (geom[i][j][k].length > 2) {\n            throw new Error(\n              'Input has more than two coordinates. ' +\n              'Only 2-dimensional polygons supported.'\n            )\n          }\n          output[i][j].push({ x: geom[i][j][k][0], y: geom[i][j][k][1] })\n        }\n      } else { // polygon\n        if (geom[i][j].length < 2) {\n          throw new Error('Input is not a Polygon or MultiPolygon')\n        }\n        if (geom[i][j].length > 2) {\n          throw new Error(\n            'Input has more than two coordinates. ' +\n            'Only 2-dimensional polygons supported.'\n          )\n        }\n        output[i].push({ x: geom[i][j][0], y: geom[i][j][1] })\n      }\n    }\n  }\n  return output\n}\n\n/* WARN: input modified directly */\nexport const forceMultiPoly = geom => {\n  if (Array.isArray(geom)) {\n    if (geom.length === 0) return // allow empty multipolys\n\n    if (Array.isArray(geom[0])) {\n      if (Array.isArray(geom[0][0])) {\n        if (\n          typeof geom[0][0][0].x === 'number' &&\n          typeof geom[0][0][0].y === 'number'\n        ) {\n          // multipolygon\n          return\n        }\n      }\n      if (\n        typeof geom[0][0].x === 'number' &&\n        typeof geom[0][0].y === 'number'\n      ) {\n        // polygon\n        geom.unshift(geom.splice(0))\n        return\n      }\n    }\n  }\n  throw new Error('Unrecognized input - not a polygon nor multipolygon')\n}\n\n/* WARN: input modified directly */\nexport const cleanMultiPoly = multipoly => {\n  let i = 0\n  while (i < multipoly.length) {\n    const poly = multipoly[i]\n    if (poly.length === 0) {\n      multipoly.splice(i, 1)\n      continue\n    }\n\n    const exteriorRing = poly[0]\n    cleanRing(exteriorRing)\n    // poly is dropped if exteriorRing is degenerate\n    if (exteriorRing.length === 0) {\n      multipoly.splice(i, 1)\n      continue\n    }\n\n    let j = 1\n    while (j < poly.length) {\n      const interiorRing = poly[j]\n      cleanRing(interiorRing)\n      if (interiorRing.length === 0) poly.splice(j, 1)\n      else j++\n    }\n\n    i++\n  }\n}\n\n/* Clean ring:\n *  - remove duplicate points\n *  - remove colinear points\n *  - remove rings with no area (less than 3 distinct points)\n *  - un-close rings (last point should not repeat first)\n *\n * WARN: input modified directly */\nexport const cleanRing = ring => {\n  if (ring.length === 0) return\n  if (cmpPoints(ring[0], ring[ring.length - 1]) === 0) ring.pop()\n\n  const isPointUncessary = (prevPt, pt, nextPt) =>\n    cmpPoints(prevPt, pt) === 0 ||\n    cmpPoints(pt, nextPt) === 0 ||\n    compareVectorAngles(pt, prevPt, nextPt) === 0\n\n  let i = 0\n  let prevPt, nextPt\n  while (i < ring.length) {\n    prevPt = (i === 0 ? ring[ring.length - 1] : ring[i - 1])\n    nextPt = (i === ring.length - 1 ? ring[0] : ring[i + 1])\n    if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1)\n    else i++\n  }\n\n  // if our ring has less than 3 distinct points now (so is degenerate)\n  // shrink it down to the empty array to communicate to our caller to\n  // drop it\n  while (ring.length < 3 && ring.length > 0) ring.pop()\n}\n","import { cmp } from './flp'\nimport { cosineOfAngle, sineOfAngle } from './vector'\n\n// Give sweep events unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet sweepEventId = 0\n\nexport default class SweepEvent {\n\n  static compare (a, b) {\n\n    // if the events are already linked, then we know the points are equal\n    if (a.point !== b.point) {\n\n      // favor event with a point that the sweep line hits first\n      const cmpX = cmp(a.point.x, b.point.x)\n      if (cmpX !== 0) return cmpX\n\n      const cmpY = cmp(a.point.y, b.point.y)\n      if (cmpY !== 0) return cmpY\n\n      // Points are equal, so go ahead and link these events.\n      a.link(b)\n    }\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1\n\n    // are they identical?\n    if (a === b) return 0\n\n    // The calcuations of relative segment angle below can give different\n    // results after segment splitting due to rounding errors.\n    // To maintain sweep event queue ordering, we thus skip these calculations\n    // if we already know the segements to be colinear (one of the requirements\n    // of the 'consumedBy' relationship).\n    let aConsumedBy = a\n    let bConsumedBy = b\n    while (aConsumedBy.consumedBy) aConsumedBy = aConsumedBy.consumedBy\n    while (bConsumedBy.consumedBy) bConsumedBy = bConsumedBy.consumedBy\n    if (aConsumedBy !== bConsumedBy) {\n\n      // favor vertical segments for left events, and non-vertical for right\n      // https://github.com/mfogel/polygon-clipping/issues/29\n      const aVert = a.segment.isVertical()\n      const bVert = b.segment.isVertical()\n      if (aVert && ! bVert) return a.isLeft ? 1 : -1\n      if (! aVert && bVert) return a.isLeft ? -1 : 1\n\n      // Favor events where the line segment is lower.\n      // Sometimes, because one segment is longer than the other,\n      // one of these comparisons will return 0 and the other won't.\n      const pointSegCmp = a.segment.compareVertically(b.otherSE.point)\n      if (pointSegCmp === 1) return -1\n      if (pointSegCmp === -1) return 1\n      const otherPointSegCmp = b.segment.compareVertically(a.otherSE.point)\n      if (otherPointSegCmp !== 0) return otherPointSegCmp\n\n      // NOTE:  We don't sort on segment length because that changes\n      //        as segments are divided.\n    }\n\n    // as a tie-breaker, favor lower creation id\n    if (a.id < b.id) return -1\n    if (a.id > b.id) return 1\n\n    throw new Error(\n      `SweepEvent comparison failed at [${a.point.x}, ${a.point.y}]`\n    )\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor (point, isLeft) {\n    if (point.events === undefined) point.events = [this]\n    else point.events.push(this)\n    this.point = point\n    this.isLeft = isLeft\n    this.id = ++sweepEventId\n    // this.segment, this.otherSE set by factory\n  }\n\n  link (other) {\n    if (other.point === this.point) {\n      throw new Error('Tried to link already linked events')\n    }\n    const otherEvents = other.point.events\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i]\n      this.point.events.push(evt)\n      evt.point = this.point\n    }\n    this.segment.checkForConsuming()\n    other.segment.checkForConsuming()\n  }\n\n  getAvailableLinkedEvents () {\n    // point.events is always of length 2 or greater\n    const events = []\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i]\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt)\n      }\n    }\n    return events\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator (baseEvent) {\n    const cache = new Map()\n\n    const fillCache = linkedEvent => {\n      const nextEvent = linkedEvent.otherSE\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)\n      })\n    }\n\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a)\n      if (!cache.has(b)) fillCache(b)\n\n      const { sine: asine, cosine: acosine } = cache.get(a)\n      const { sine: bsine, cosine: bcosine } = cache.get(b)\n\n      const cmpZeroASine = cmp(asine, 0)\n      const cmpZeroBSine = cmp(bsine, 0)\n\n      if (cmpZeroASine >= 0 && cmpZeroBSine >= 0) return cmp(bcosine, acosine)\n      if (cmpZeroASine < 0 && cmpZeroBSine < 0) return cmp(acosine, bcosine)\n      return cmp(bsine, asine)\n    }\n  }\n}\n","import operation from './operation'\nimport SweepEvent from './sweep-event'\nimport { isInBbox, touchesBbox, getBboxOverlap } from './bbox'\nimport { cmp, cmpPoints, touchPoints } from './flp'\nimport { closestPoint, intersection, verticalIntersection } from './vector'\n\nexport default class Segment {\n  static compare (a, b) {\n\n    const alx = a.leftSE.point.x\n    const aly = a.leftSE.point.y\n    const blx = b.leftSE.point.x\n    const bly = b.leftSE.point.y\n    const arx = a.rightSE.point.x\n    const brx = b.rightSE.point.x\n\n    // check if they're even in the same vertical plane\n    if (cmp(brx, alx) < 0) return 1\n    if (cmp(arx, blx) < 0) return -1\n\n    // check for a consumption relationship. if present,\n    // avoid the segment angle calculations (can yield\n    // inconsistent results after splitting)\n    let aConsumedBy = a\n    let bConsumedBy = b\n    while (aConsumedBy.consumedBy) aConsumedBy = aConsumedBy.consumedBy\n    while (bConsumedBy.consumedBy) bConsumedBy = bConsumedBy.consumedBy\n\n    // for segment angle comparisons\n    let aCmpBLeft, aCmpBRight, bCmpALeft, bCmpARight\n\n    if (aConsumedBy === bConsumedBy) {\n      // are they identical?\n      if (a === b) return 0\n\n      // colinear segments with matching left-endpoints, fall back\n      // on creation order of left sweep events as a tie-breaker\n      const aId = a.leftSE.id\n      const bId = b.leftSE.id\n      if (aId < bId) return -1\n      if (aId > bId) return 1\n\n    } else if (\n      // are a and b colinear?\n      (aCmpBLeft = a.comparePoint(b.leftSE.point)) === 0 &&\n      (aCmpBRight = a.comparePoint(b.rightSE.point)) === 0 &&\n      (bCmpALeft = b.comparePoint(a.leftSE.point)) === 0 &&\n      (bCmpARight = b.comparePoint(a.rightSE.point)) === 0\n    ) {\n      // a & b are colinear\n\n      // colinear segments with non-matching left-endpoints, consider\n      // the more-left endpoint to be earlier\n      const cmpLX = cmp(alx, blx)\n      if (cmpLX !== 0) return cmpLX\n\n      // NOTE: we do not use segment length to break a tie here, because\n      //       when segments are split their length changes\n\n      // colinear segments with matching left-endpoints, fall back\n      // on creation order of left sweep events as a tie-breaker\n      const aId = a.leftSE.id\n      const bId = b.leftSE.id\n      if (aId < bId) return -1\n      if (aId > bId) return 1\n\n    } else {\n      // a & b are not colinear\n\n      const cmpLX = cmp(alx, blx)\n      // if the left endpoints are not in the same vertical line,\n      // consider the placement of the left event of the right-more segment\n      // with respect to the left-more segment.\n      if (cmpLX < 0) {\n        if (aCmpBLeft > 0) return -1\n        if (aCmpBLeft < 0) return 1\n        // NOTE: fall-through is necessary here. why? Can that be avoided?\n      }\n      if (cmpLX > 0) {\n        if (bCmpALeft === undefined) bCmpALeft = b.comparePoint(a.leftSE.point)\n        if (bCmpALeft !== 0) return bCmpALeft\n        // NOTE: fall-through is necessary here. why? Can that be avoided?\n      }\n\n      const cmpLY = cmp(aly, bly)\n      // if left endpoints are in the same vertical line, lower means ealier\n      if (cmpLY !== 0) return cmpLY\n      // left endpoints match exactly\n\n      // special case verticals due to rounding errors\n      // part of https://github.com/mfogel/polygon-clipping/issues/29\n      const aVert = a.isVertical()\n      if (aVert !== b.isVertical()) return aVert ? 1 : -1\n\n      // sometimes, because one segment is longer than the other,\n      // one of these comparisons will return 0 and the other won't\n      if (aCmpBRight === undefined) aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight > 0) return -1\n      if (aCmpBRight < 0) return 1\n      if (bCmpARight === undefined) bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n    }\n\n    throw new Error(\n      'Segment comparison of ' +\n      `[${a.leftSE.point.x}, ${a.leftSE.point.y}] -> [${a.rightSE.point.x}, ${a.rightSE.point.y}] ` +\n      'against ' +\n      `[${b.leftSE.point.x}, ${b.leftSE.point.y}] -> [${b.rightSE.point.x}, ${b.rightSE.point.y}] ` +\n      'failed. Please submit a bug report.'\n    )\n  }\n\n  /* Warning: a reference to ringsIn input will be stored,\n   *  and possibly will be later modified */\n  constructor (leftSE, rightSE, ringsIn) {\n    this.leftSE = leftSE\n    leftSE.segment = this\n    leftSE.otherSE = rightSE\n    this.rightSE = rightSE\n    rightSE.segment = this\n    rightSE.otherSE = leftSE\n    this.ringsIn = ringsIn\n    this._cache = {}\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n\n  static fromRing(point1, point2, ring) {\n    let leftSE, rightSE\n    const ptCmp = cmpPoints(point1, point2)\n    if (ptCmp < 0) {\n      leftSE = new SweepEvent(point1, true)\n      rightSE = new SweepEvent(point2, false)\n    } else if (ptCmp > 0) {\n      leftSE = new SweepEvent(point2, true)\n      rightSE = new SweepEvent(point1, false)\n    } else {\n      throw new Error(\n        `Tried to create degenerate segment at [${point1.x}, ${point2.y}]`\n      )\n    }\n    return new Segment(leftSE, rightSE, [ring])\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE (newRightSE) {\n    this.rightSE = newRightSE\n    this.rightSE.segment = this\n    this.rightSE.otherSE = this.leftSE\n    this.leftSE.otherSE = this.rightSE\n  }\n\n  bbox () {\n    const y1 = this.leftSE.point.y\n    const y2 = this.rightSE.point.y\n    return {\n      ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\n      ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 }\n    }\n  }\n\n  /* A vector from the left point to the right */\n  vector () {\n    return {\n      x: this.rightSE.point.x - this.leftSE.point.x,\n      y: this.rightSE.point.y - this.leftSE.point.y\n    }\n  }\n\n  isVertical () {\n    return cmp(this.leftSE.point.x, this.rightSE.point.x) === 0\n  }\n\n  isAnEndpoint (point) {\n    return (\n      cmpPoints(point, this.leftSE.point) === 0 ||\n      cmpPoints(point, this.rightSE.point) === 0\n    )\n  }\n\n  /* Compare this segment with a point. Return value indicates:\n   *     1: point lies above or to the left of segment\n   *     0: point is colinear to segment\n   *    -1: point is below or to the right of segment */\n  comparePoint (point) {\n    if (this.isAnEndpoint(point)) return 0\n    const interPt = closestPoint(this.leftSE.point, this.vector(), point)\n\n    const cmpY = cmp(point.y, interPt.y)\n    if (cmpY !== 0) return cmpY\n\n    const cmpX = cmp(point.x, interPt.x)\n    const segCmpX = cmp(this.leftSE.point.y, this.rightSE.point.y)\n\n    // depending on if our segment angles up or down,\n    // the x coord comparison means oppposite things\n    if (cmpX > 0) return segCmpX\n    if (cmpX < 0) {\n      if (segCmpX > 0) return -1\n      if (segCmpX < 0) return 1\n    }\n    return 0\n  }\n\n  /* Compare point vertically with segment.\n   *    1: point is below segment\n   *    0: segment appears to be vertical\n   *   -1: point is above segment */\n  compareVertically (point) {\n    if (this.isAnEndpoint(point)) return 0\n    const interPt = verticalIntersection(this.leftSE.point, this.vector(), point.x)\n\n    // Trying to be as exact as possible here, hence not using flp comparisons\n    if (interPt !== null) {\n      if (point.y < interPt.y) return -1\n      if (point.y > interPt.y) return 1\n    }\n    return 0\n  }\n\n  /* Does the point in question touch the given segment?\n   * Greedy - essentially a 2 * Number.EPSILON comparison.\n   * If it's not possible to add an independent point between the\n   * point and the segment, we say the point 'touches' the segment. */\n  touches (point) {\n    if (!touchesBbox(this.bbox(), point)) return false\n    const cPt = closestPoint(this.leftSE.point, this.vector(), point)\n    const avgPt = { x: (cPt.x + point.x) / 2, y: (cPt.y + point.y) / 2 }\n    return touchPoints(avgPt, cPt) || touchPoints(avgPt, point)\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection (other) {\n    // If bboxes don't overlap, there can't be any intersections\n    const bboxOverlap = getBboxOverlap(this.bbox(), other.bbox())\n    if (bboxOverlap === null) return null\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    // does each endpoint touch the other segment?\n    const touchesOtherLSE = this.touches(other.leftSE.point)\n    const touchesThisLSE = other.touches(this.leftSE.point)\n    const touchesOtherRSE = this.touches(other.rightSE.point)\n    const touchesThisRSE = other.touches(this.rightSE.point)\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return this.rightSE.point\n      if (!touchesThisRSE && touchesOtherRSE) return other.rightSE.point\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE && cmpPoints(this.leftSE.point, other.rightSE.point) === 0) return null\n      // t-intersection on left endpoint\n      return this.leftSE.point\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE && cmpPoints(this.rightSE.point, other.leftSE.point) === 0) return null\n      // t-intersection on left endpoint\n      return other.leftSE.point\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return this.rightSE.point\n    if (touchesOtherRSE) return other.rightSE.point\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection(this.leftSE.point, this.vector(), other.leftSE.point, other.vector())\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null\n\n    // We don't need to check if we need to 'snap' to an endpoint,\n    // because the endpoint cmps we did eariler were greedy\n    return pt\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split (points) {\n    // sort the points in sweep line order\n    points.sort(cmpPoints)\n\n    let prevSeg = this\n    let prevPoint = null\n\n    const newEvents = []\n    for (let i = 0, iMax = points.length; i < iMax; i++) {\n      const point = points[i]\n      // skip repeated points\n      if (prevPoint && cmpPoints(prevPoint, point) === 0) continue\n      const alreadyLinked = point.events !== undefined\n\n      const newLeftSE = new SweepEvent(point, true)\n      const newRightSE = new SweepEvent(point, false)\n      const oldRightSE = prevSeg.rightSE\n      prevSeg.replaceRightSE(newRightSE)\n      newEvents.push(newRightSE)\n      newEvents.push(newLeftSE)\n\n      prevSeg = new Segment(newLeftSE, oldRightSE, prevSeg.ringsIn.slice())\n\n      // in the point we just used to create new sweep events with was already\n      // linked to other events, we need to check if either of the affected\n      // segments should be consumed\n      if (alreadyLinked) {\n        newLeftSE.segment.checkForConsuming()\n        newRightSE.segment.checkForConsuming()\n      }\n\n      prevPoint = point\n    }\n\n    return newEvents\n  }\n\n  /* Do a pass over the linked events and to see if any segments\n   * should be consumed. If so, do it. */\n  checkForConsuming () {\n    if (this.leftSE.point.events.length === 1) return\n    if (this.rightSE.point.events.length === 1) return\n    for (let i = 0, iMax = this.leftSE.point.events.length; i < iMax; i++) {\n      const le = this.leftSE.point.events[i]\n      if (le === this.leftSE) continue\n      for (let j = 0, jMax = this.rightSE.point.events.length; j < jMax; j++) {\n        const re = this.rightSE.point.events[j]\n        if (re === this.rightSE) continue\n        if (le.segment === re.segment) this.consume(le.segment)\n      }\n    }\n  }\n\n  /* Consume another segment. We take their ringsIn under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume (other) {\n    let consumer = this\n    let consumee = other\n    while (consumer.consumedBy) consumer = consumer.consumedBy\n    while (consumee.consumedBy) consumee = consumee.consumedBy\n\n    const cmp = Segment.compare(consumer, consumee)\n    if (cmp === 0) return  // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp  > 0) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    for (let i = 0, iMax = consumee.ringsIn.length; i < iMax; i++) {\n      consumer.ringsIn.push(consumee.ringsIn[i])\n    }\n    consumee.ringsIn = null\n    consumee.consumedBy = consumer\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE\n    consumee.rightSE.consumedBy = consumer.rightSE\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult () {\n    const key = 'prevInResult'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _prevInResult () {\n    if (! this.prev) return null\n    if (this.prev.isInResult()) return this.prev\n    return this.prev.prevInResult()\n  }\n\n  ringsBefore () {\n    const key = 'ringsBefore'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _ringsBefore () {\n    if (! this.prev) return []\n    return (this.prev.consumedBy || this.prev).ringsAfter()\n  }\n\n  ringsAfter () {\n    const key = 'ringsAfter'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _ringsAfter () {\n    const rings = this.ringsBefore().slice(0)\n    for (let i = 0, iMax = this.ringsIn.length; i < iMax; i++) {\n      const ring = this.ringsIn[i]\n      const index = rings.indexOf(ring)\n      if (index === -1) rings.push(ring)\n      else rings.splice(index, 1)\n    }\n    return rings\n  }\n\n  multiPolysBefore () {\n    const key = 'multiPolysBefore'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _multiPolysBefore () {\n    if (! this.prev) return []\n    return (this.prev.consumedBy || this.prev).multiPolysAfter()\n  }\n\n  multiPolysAfter () {\n    const key = 'multiPolysAfter'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _multiPolysAfter () {\n    // first calcualte our polysAfter\n    const polysAfter = []\n    const polysExclude = []\n    const ringsAfter = this.ringsAfter()\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      const ring = ringsAfter[i]\n      const poly = ring.poly\n      if (polysExclude.indexOf(poly) !== -1) continue\n      if (ring.isExterior) polysAfter.push(poly)\n      else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly)\n        const index = polysAfter.indexOf(ring.poly)\n        if (index !== -1) polysAfter.splice(index, 1)\n      }\n    }\n    // now calculate our multiPolysAfter\n    const mps = []\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly\n      if (mps.indexOf(mp) === -1) mps.push(mp)\n    }\n    return mps\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult () {\n    const key = 'isInResult'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _isInResult () {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false\n\n    const mpsBefore = this.multiPolysBefore()\n    const mpsAfter = this.multiPolysAfter()\n\n    switch (operation.type) {\n      case 'union': {\n        // UNION - included iff:\n        //  * On one side of us there is 0 poly interiors AND\n        //  * On the other side there is 1 or more.\n        const noBefores = mpsBefore.length === 0\n        const noAfters = mpsAfter.length === 0\n        return noBefores !== noAfters\n      }\n\n      case 'intersection': {\n        // INTERSECTION - included iff:\n        //  * on one side of us all multipolys are rep. with poly interiors AND\n        //  * on the other side of us, not all multipolys are repsented\n        //    with poly interiors\n        let least\n        let most\n        if (mpsBefore.length < mpsAfter.length) {\n          least = mpsBefore.length\n          most = mpsAfter.length\n        } else {\n          least = mpsAfter.length\n          most = mpsBefore.length\n        }\n        return most === operation.numMultiPolys && least < most\n      }\n\n      case 'xor': {\n        // XOR - included iff:\n        //  * the difference between the number of multipolys represented\n        //    with poly interiors on our two sides is an odd number\n        const diff = Math.abs(mpsBefore.length - mpsAfter.length)\n        return diff % 2 === 1\n      }\n\n      case 'difference': {\n        // DIFFERENCE included iff:\n        //  * on exactly one side, we have just the subject\n        const isJustSubject = mps => mps.length === 1 && mps[0].isSubject\n        return isJustSubject(mpsBefore) !== isJustSubject(mpsAfter)\n      }\n\n      default:\n        throw new Error(`Unrecognized operation type found ${operation.type}`)\n    }\n  }\n\n}\n","import { cmp, touch } from './flp'\n\n/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nexport const isInBbox = (bbox, point) => {\n  return (\n    cmp(bbox.ll.x, point.x) <= 0 &&\n    cmp(point.x, bbox.ur.x) <= 0 &&\n    cmp(bbox.ll.y, point.y) <= 0 &&\n    cmp(point.y, bbox.ur.y) <= 0\n  )\n}\n\n/* Greedy comparison with a bbox. A point is defined to 'touch'\n * a bbox if:\n *  - it is inside the bbox\n *  - it 'touches' one of the sides (another greedy comparison) */\nexport const touchesBbox = (bbox, point) => {\n  return (\n    (cmp(bbox.ll.x, point.x) <= 0 || touch(bbox.ll.x, point.x)) &&\n    (cmp(point.x, bbox.ur.x) <= 0 || touch(point.x, bbox.ur.x)) &&\n    (cmp(bbox.ll.y, point.y) <= 0 || touch(bbox.ll.y, point.y)) &&\n    (cmp(point.y, bbox.ur.y) <= 0 || touch(point.y, bbox.ur.y))\n  )\n}\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1, b2) => {\n  // check if the bboxes overlap at all\n  if (\n    cmp(b2.ur.x, b1.ll.x) < 0 ||\n    cmp(b1.ur.x, b2.ll.x) < 0 ||\n    cmp(b2.ur.y, b1.ll.y) < 0 ||\n    cmp(b1.ur.y, b2.ll.y) < 0\n  ) return null\n\n  // find the middle two X values\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } }\n}\n","import Segment from './segment'\n\nexport class RingIn {\n  constructor (geomRing, poly, isExterior) {\n    this.poly = poly\n    this.isExterior = isExterior\n    this.segments = []\n\n    let prevPoint = geomRing[0]\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      let point = geomRing[i]\n      this.segments.push(Segment.fromRing(prevPoint, point, this))\n      prevPoint = point\n    }\n    this.segments.push(Segment.fromRing(prevPoint, geomRing[0], this))\n  }\n\n  getSweepEvents () {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i]\n      sweepEvents.push(segment.leftSE)\n      sweepEvents.push(segment.rightSE)\n    }\n    return sweepEvents\n  }\n}\n\nexport class PolyIn {\n  constructor (geomPoly, multiPoly) {\n    this.exteriorRing = new RingIn(geomPoly[0], this, true)\n    this.interiorRings = []\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      this.interiorRings.push(new RingIn(geomPoly[i], this, false))\n    }\n    this.multiPoly = multiPoly\n  }\n\n  getSweepEvents () {\n    const sweepEvents = this.exteriorRing.getSweepEvents()\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n\nexport class MultiPolyIn {\n  constructor (geomMultiPoly) {\n    this.polys = []\n    for (let i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\n      this.polys.push(new PolyIn(geomMultiPoly[i], this))\n    }\n    this.isSubject = false\n  }\n\n  markAsSubject () {\n    this.isSubject = true\n  }\n\n  getSweepEvents () {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents()\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n","import { compareVectorAngles } from './vector'\nimport SweepEvent from './sweep-event'\n\nexport class RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory (allSegments) {\n    const ringsOut = []\n\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i]\n      if (!segment.isInResult() || segment.ringOut) continue\n\n      let prevEvent = null\n      let event = segment.leftSE\n      let nextEvent = segment.rightSE\n      const events = [event]\n\n      const startingPoint = event.point\n      const intersectionLEs = []\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event\n        event = nextEvent\n        events.push(event)\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break\n\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents()\n\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n           * part of the algorithm malfunctioned... please file a bug report. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point\n            const lastPt = events[events.length - 1].point\n            throw new Error(\n              `Unable to complete output ring starting at [${firstPt.x},` +\n                ` ${firstPt.y}]. Last matching segment found ends at` +\n                ` [${lastPt.x}, ${lastPt.y}].`\n            )\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE\n            break\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j\n              break\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\n            const ringEvents = events.splice(intersectionLE.index)\n            ringEvents.unshift(ringEvents[0].otherSE)\n            ringsOut.push(new RingOut(ringEvents.reverse()))\n            continue\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point,\n          })\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent)\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\n          break\n        }\n      }\n\n      ringsOut.push(new RingOut(events))\n    }\n    return ringsOut\n  }\n\n  constructor (events) {\n    this.events = events\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this\n    }\n    this.poly = null\n  }\n\n  getGeom () {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point\n    const points = [prevPt]\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point\n      const nextPt = this.events[i + 1].point\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue\n      points.push(pt)\n      prevPt = pt\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null\n\n    // check if the starting point is necessary\n    const pt = points[0]\n    const nextPt = points[1]\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift()\n\n    points.push(points[0])\n    const step = this.isExteriorRing() ? 1 : -1\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1\n    const iEnd = this.isExteriorRing() ? points.length : -1\n    const orderedPoints = []\n    for (let i = iStart; i != iEnd; i += step) orderedPoints.push([points[i].x, points[i].y])\n    return orderedPoints\n  }\n\n  isExteriorRing () {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing()\n      this._isExteriorRing = enclosing ? ! enclosing.isExteriorRing() : true\n    }\n    return this._isExteriorRing\n  }\n\n  enclosingRing () {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing()\n    }\n    return this._enclosingRing\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing () {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0]\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i]\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt\n    }\n\n    let prevSeg = leftMostEvt.segment.prevInResult()\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut\n        } else return prevSeg.ringOut.enclosingRing()\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult()\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n    }\n  }\n}\n\nexport class PolyOut {\n  constructor (exteriorRing) {\n    this.exteriorRing = exteriorRing\n    exteriorRing.poly = this\n    this.interiorRings = []\n  }\n\n  addInterior (ring) {\n    this.interiorRings.push(ring)\n    ring.poly = this\n  }\n\n  getGeom () {\n    const geom = [this.exteriorRing.getGeom()]\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom[0] === null) return null\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom()\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue\n      geom.push(ringGeom)\n    }\n    return geom\n  }\n}\n\nexport class MultiPolyOut {\n  constructor (rings) {\n    this.rings = rings\n    this.polys = this._composePolys(rings)\n  }\n\n  getGeom () {\n    const geom = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom()\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue\n      geom.push(polyGeom)\n    }\n    return geom\n  }\n\n  _composePolys (rings) {\n    const polys = []\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i]\n      if (ring.poly) continue\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring))\n      else {\n        const enclosingRing = ring.enclosingRing()\n        if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing))\n        enclosingRing.poly.addInterior(ring)\n      }\n    }\n    return polys\n  }\n}\n","import SplayTree from 'splaytree'\nimport Segment from './segment'\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nexport default class SweepLine {\n  constructor (queue, comparator = Segment.compare) {\n    this.queue = queue\n    this.tree = new SplayTree(comparator)\n    this.segments = []\n  }\n\n  process (event) {\n    const segment = event.segment\n    const newEvents = []\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (! event.isLeft) this.tree.remove(segment)\n      return newEvents\n    }\n\n    const node = event.isLeft\n      ? this.tree.insert(segment)\n      : this.tree.find(segment)\n\n    if (! node) throw new Error(\n      'Unable to find segment ' +\n      `#${segment.leftSE.id} [${segment.leftSE.point.x}, ${segment.leftSE.point.y}] -> ` +\n      `#${segment.rightSE.id} [${segment.rightSE.point.x}, ${segment.rightSE.point.y}] ` +\n      'in SweepLine tree. Please submit a bug report.'\n    )\n\n    let prevNode = node\n    let nextNode = node\n    let prevSeg = undefined\n    let nextSeg = undefined\n\n    // skip consumed segments still in tree\n    while (prevSeg === undefined) {\n      prevNode = this.tree.prev(prevNode)\n      if (prevNode === null) prevSeg = null\n      else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key\n    }\n\n    // skip consumed segments still in tree\n    while (nextSeg === undefined) {\n      nextNode = this.tree.next(nextNode)\n      if (nextNode === null) nextSeg = null\n      else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key\n    }\n\n    if (event.isLeft) {\n      // TODO: would it make sense to just stop and bail out at the first time we're split?\n      //       rather than split ourselves multiple times?\n      const mySplitters = []\n\n      // Check for intersections against the previous segment in the sweep line\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment)\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) mySplitters.push(prevInter)\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment)\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) mySplitters.push(nextInter)\n          if (!nextSeg.isAnEndpoint(nextInter))  {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // did we get some intersections? split ourselves if need be\n      if (newEvents.length > 0 || mySplitters.length > 0) {\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.tree.remove(segment)\n        this.queue.remove(segment.rightSE)\n        newEvents.push(segment.rightSE)\n\n        if (mySplitters.length > 0) {\n          const newEventsFromSplit = segment.split(mySplitters)\n          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n            newEvents.push(newEventsFromSplit[i])\n          }\n        }\n\n        // Make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers - re-do the current event.\n        newEvents.push(event)\n\n      } else {\n        // done with left event\n        this.segments.push(segment)\n        segment.prev = prevSeg\n      }\n\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg)\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter))  {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter))  {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      this.tree.remove(segment)\n    }\n\n    return newEvents\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.remove(seg)\n    const rightSE = seg.rightSE\n    this.queue.remove(rightSE)\n    const newEvents = seg.split([pt])\n    newEvents.push(rightSE)\n    this.tree.insert(seg)\n    return newEvents\n  }\n}\n","import SplayTree from 'splaytree'\nimport * as cleanInput from './clean-input'\nimport * as geomIn from './geom-in'\nimport * as geomOut from './geom-out'\nimport SweepEvent from './sweep-event'\nimport SweepLine from './sweep-line'\n\nexport class Operation {\n  run (type, geom, moreGeoms) {\n    operation.type = type\n\n    /* Make a copy of the input geometry with points as objects, for perf */\n    const geoms = [cleanInput.pointsAsObjects(geom)]\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      geoms.push(cleanInput.pointsAsObjects(moreGeoms[i]))\n    }\n\n    /* Clean inputs */\n    for (let i = 0, iMax = geoms.length; i < iMax; i++) {\n      cleanInput.forceMultiPoly(geoms[i])\n      cleanInput.cleanMultiPoly(geoms[i])\n    }\n\n    /* Convert inputs to MultiPoly objects, mark subject */\n    const multipolys = []\n    for (let i = 0, iMax = geoms.length; i < iMax; i++) {\n      multipolys.push(new geomIn.MultiPolyIn(geoms[i]))\n    }\n    multipolys[0].markAsSubject()\n    operation.numMultiPolys = multipolys.length\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTree(SweepEvent.compare)\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents()\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.insert(sweepEvents[j])\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue)\n    let prevQueueSize = queue.size\n    let node = queue.pop()\n    while (node) {\n      const evt = node.key\n      if (queue.size === prevQueueSize) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\n          `Unable to pop() SweepEvent #${evt.id} [${evt.point.x}, ${evt.point.y}] ` +\n          'from queue. Please file a bug report.'\n        )\n      }\n      const newEvents = sweepLine.process(evt)\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        queue.insert(newEvents[i])\n      }\n      prevQueueSize = queue.size\n      node = queue.pop()\n    }\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = geomOut.RingOut.factory(sweepLine.segments)\n    const result = new geomOut.MultiPolyOut(ringsOut)\n    return result.getGeom()\n  }\n}\n\n// singleton available by import\nconst operation = new Operation()\n\nexport default operation\n","import operation from './operation'\n\nconst union = (geom, ...moreGeoms) =>\n  operation.run('union', geom, moreGeoms)\n\nconst intersection = (geom, ...moreGeoms) =>\n  operation.run('intersection', geom, moreGeoms)\n\nconst xor = (geom, ...moreGeoms) =>\n  operation.run('xor', geom, moreGeoms)\n\nconst difference = (subjectGeom, ...clippingGeoms) =>\n  operation.run('difference', subjectGeom, clippingGeoms)\n\nexport default {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference,\n}\n"],"names":["Node","key","data","left","right","DEFAULT_COMPARE","a","b","splay","i","t","comparator","l","r","y","N","cmp","insert","tree","node","_size","remove","x","split","v","Tree","_comparator","_root","this","add","current","compare","visitor","ctx","Q","done","push","length","pop","call","low","high","fn","keys","forEach","values","minNode","maxNode","index","d","root","successor","predecessor","head","next","p","toList","presort","size","sort","pivot","j","tmp","loadRecursive","parent","start","end","middle","Math","floor","mergedList","l1","l2","p1","p2","mergeLists","createList","sortedListToBST","list","printNode","n","out","printRow","prefix","isTail","indent","join","newKey","newData","merge","epsilon","Number","EPSILON","undefined","pow","EPSILON_SQ","cmpPoints","aPt","bPt","diff","touch","m","touchPoints","mPt","crossProduct","dotProduct","compareVectorAngles","basePt","endPt1","endPt2","v1","v2","kross","sqrt","cosineOfAngle","pShared","pBase","pAngle","vBase","vAngle","closestPoint","pt1","pt2","dist","horizontalIntersection","pt","verticalIntersection","pointsAsObjects","geom","output","Array","isArray","Error","iMax","jMax","k","kMax","forceMultiPoly","unshift","splice","cleanMultiPoly","multipoly","poly","exteriorRing","cleanRing","interiorRing","ring","prevPt","nextPt","isPointUncessary","sweepEventId","SweepEvent","point","isLeft","events","id","cmpX","cmpY","link","aConsumedBy","bConsumedBy","consumedBy","aVert","segment","isVertical","bVert","pointSegCmp","compareVertically","otherSE","otherPointSegCmp","other","otherEvents","evt","checkForConsuming","ringOut","isInResult","baseEvent","cache","Map","fillCache","linkedEvent","nextEvent","set","sine","_this","cosine","has","get","asine","acosine","bsine","bcosine","cmpZeroASine","cmpZeroBSine","Segment","leftSE","rightSE","ringsIn","_cache","alx","aly","blx","bly","arx","brx","aCmpBLeft","aCmpBRight","bCmpALeft","bCmpARight","aId","bId","comparePoint","cmpLX","cmpLY","newRightSE","y1","y2","ll","ur","isAnEndpoint","interPt","vector","segCmpX","bbox","touchesBbox","cPt","avgPt","bboxOverlap","b1","b2","lowerX","upperX","getBboxOverlap","touchesOtherLSE","touches","touchesThisLSE","touchesOtherRSE","touchesThisRSE","ve","d1","d2","intersection","points","prevSeg","prevPoint","newEvents","alreadyLinked","newLeftSE","oldRightSE","replaceRightSE","slice","le","re","consume","consumer","consumee","prev","prevInResult","ringsAfter","rings","ringsBefore","indexOf","multiPolysAfter","polysAfter","polysExclude","isExterior","mps","mp","multiPoly","mpsBefore","multiPolysBefore","mpsAfter","operation","type","least","most","numMultiPolys","abs","isJustSubject","isSubject","point1","point2","ptCmp","RingIn","geomRing","segments","fromRing","sweepEvents","PolyIn","geomPoly","interiorRings","getSweepEvents","ringSweepEvents","MultiPolyIn","geomMultiPoly","polys","polySweepEvents","RingOut","allSegments","ringsOut","prevEvent","event","startingPoint","intersectionLEs","availableLEs","getAvailableLinkedEvents","firstPt","lastPt","indexLE","getLeftmostComparator","intersectionLE","ringEvents","reverse","shift","step","isExteriorRing","iStart","iEnd","orderedPoints","_isExteriorRing","enclosing","enclosingRing","_enclosingRing","_calcEnclosingRing","leftMostEvt","prevPrevSeg","PolyOut","getGeom","ringGeom","MultiPolyOut","_composePolys","polyGeom","addInterior","SweepLine","queue","SplayTree","find","prevNode","nextNode","nextSeg","mySplitters","prevInter","getIntersection","newEventsFromSplit","_splitSafely","nextInter","inter","seg","moreGeoms","geoms","cleanInput","multipolys","geomIn","markAsSubject","sweepLine","prevQueueSize","process","geomOut","factory","union","run","xor","difference","subjectGeom","clippingGeoms"],"mappings":"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"}